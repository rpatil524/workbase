'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');
var lint = require('@codemirror/lint');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "*UOYQPOOO_QPO'#CbOOQO'#Ca'#CaOOQO'#DX'#DXOmQPO'#C`QOQPOOOuQPO'#CgOOQO'#Cf'#CfO_QPO'#DQO!TQPO'#DRO!YQPO'#DTOOQO'#Ce'#CeO!_QPO'#DYO!dQPO'#CdOOQO,58|,58|OOQO-E7V-E7VO!{QPO,58zO#QQQO'#ClO#YQQO'#CpO#bQPO'#CuOOQO'#Ck'#CkO#gQPO'#CjOOQO,59R,59ROxQPO,59RO#oQPO,59lO_QPO,59mO_QPO,59oOOQO,59t,59tOOQO-E7W-E7WOOQO1G.f1G.fOOQO'#Cn'#CnOOQO,59W,59WO#tQPO,59[O$VQPO,59[O$bQQO'#CwOOQO,59a,59aO$jQPO,59UO$xQPO,59UOOQO1G.m1G.mO%QQPO1G/WO%YQPO1G/XO%_QPO1G/ZOOQO'#Cr'#CrOOQO1G.v1G.vO%dQPO'#CnO%oQPO'#CyO%tQPO,59cOOQO,59v,59vO%|QPO1G.pOOQO-E7Y-E7YO&[QPO'#D]O&aQPO7+$nOOQO7+$s7+$sOOQO7+$u7+$uO&iQPO,59eO&nQQO1G.}O&yQPO1G.}OOQO1G.}1G.}PxQPO'#D[O_QPO,59wOOQO-E7Z-E7ZOOQO1G/P1G/POOQO,59u,59uOOQO7+$i7+$iO'RQQO7+$iOOQO-E7X-E7XO'^QPO1G/cOOQO<<HT<<HTP$bQQO'#DZOOQO7+$}7+$}",
  stateData: "'c~OPOSQOS~OVPO~O[UOqWOvXOxYO~OVPOz`O~O]gOaaOebOjcO~OqiO~OqjO~OykO~O[UOqWOvXOxYOVWXzWXrWX~OymO~O[nOcnO~O[pOcnO~OlrO~O]tOy^X~OrwO~O[bX]dagbXhbXyda~O[{OgzOhzO~O[|OcnO~OaaOebOjcOy^a~O]!QOy^a~Os!SOyti~Or!UO~Or!VO~O]mXnbXomX~On!WO~O]!XOo!ZO~OaaOebOjcOy^i~Oq!]O~Os!SOypq~O[!_O~O[|OcnOo!aO~O]!bOo!aO~O[|OcnOo!eO~Or!gO~O",
  goto: "${!QPPPP!R!U!YP!^!m!u!}PP#V#]#fP#mP#fP#yPP#fP#|P$PPP!uPPP!u!uP!uPPP$X$_$i$o$uRTOTROSTQOSQ^PQhWQxiQyjR!d!]][PW]ij!]]ZPW]ij!]]VPW]ij!]QfURvgSeUgV!Pt!Q![ZdUgt!Q![QoaQqbX}r!X!b!fR{qRscQ!OrV!`!X!b!fQSOR_SY]PWij!]Rl]Q!Y!OR!c!YQueR!RuQ!TwR!^!T",
  nodeNames: "âš  Whitespace LineComment QueryPipeline Pipeline QueryStage ClauseMatch Match Patterns Pattern Statement StatementThing Var Comma ThingConstraintList ThingConstraint IsaConstraint Isa TypeRef Label HasConstraint Has ValueLiteral StringLiteral IntegerLiteral LinksConstraint Links Relation ParenOpen RolePlayer Colon ParenClose PatternDisjunction CurlyOpen CurlyClose Or PatternConjunction PatternNegation Not PatternTry Try Semicolon End",
  maxTerm: 49,
  skippedNodes: [0,1,2],
  repeatNodeCount: 5,
  tokenData: "6x~RoXY#SYZ#S]^#Spq#Srs#est%Rtu%jxy&byz&g|}&l}!O&q!Q!['k![!](R!]!^(W!c!}'V#R#S'V#T#X'V#X#Y(]#Y#['V#[#])y#]#^+d#^#`'V#`#a,}#a#b/q#b#c2b#c#d4O#d#h'V#h#i5Q#i#o'V#o#p6n#q#r6s~#XSP~XY#SYZ#S]^#Spq#S~#hVOr#ers#}s#O#e#O#P$S#P;'S#e;'S;=`${<%lO#e~$SOg~~$VRO;'S#e;'S;=`$`;=`O#e~$cWOr#ers#}s#O#e#O#P$S#P;'S#e;'S;=`${;=`<%l#e<%lO#e~%OP;=`<%l#e~%WSQ~OY%RZ;'S%R;'S;=`%d<%lO%R~%gP;=`<%l%R~%mT}!O%|!Q![%|!c!}%|#R#S%|#T#o%|~&RT[~}!O%|!Q![%|!c!}%|#R#S%|#T#o%|~&gOl~~&lOo~~&qO]~R&vTcQ}!O'V!Q!['k!c!}'V#R#S'V#T#o'VQ'[TcQ}!O'V!Q!['V!c!}'V#R#S'V#T#o'VR'rThPcQ}!O'V!Q!['k!c!}'V#R#S'V#T#o'V~(WOn~~(]Oy~R(bVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#b'V#b#c(w#c#o'VR(|VcQ}!O'V!Q!['V!c!}'V#R#S'V#T#W'V#W#X)c#X#o'VR)jTzPcQ}!O'V!Q!['V!c!}'V#R#S'V#T#o'VR*OUcQ}!O'V!Q!['V!c!}'V#R#S'V#T#U*b#U#o'VR*gVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#g'V#g#h*|#h#o'VR+TTePcQ}!O'V!Q!['V!c!}'V#R#S'V#T#o'VR+iVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#g'V#g#h,O#h#o'VR,TUcQ}!O'V!Q!['V!c!}'V#R#S'V#T#U,g#U#o'VR,nTaPcQ}!O'V!Q!['V!c!}'V#R#S'V#T#o'VR-SVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#]'V#]#^-i#^#o'VR-nVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#b'V#b#c.T#c#o'VR.YVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#_'V#_#`.o#`#o'VR.tVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#g'V#g#h/Z#h#o'VR/bTcQjP}!O'V!Q!['V!c!}'V#R#S'V#T#o'VR/vUcQ}!O'V!Q!['V!c!}'V#R#S'V#T#U0Y#U#o'VR0_VcQ}!O'V!Q!['V!c!}'V#R#S'V#T#h'V#h#i0t#i#o'VR0yVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#V'V#V#W1`#W#o'VR1eVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#['V#[#]1z#]#o'VR2RTcQVP}!O'V!Q!['V!c!}'V#R#S'V#T#o'VR2gVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#c'V#c#d2|#d#o'VR3RVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#h'V#h#i3h#i#o'VR3oTcQvP}!O'V!Q!['V!c!}'V#R#S'V#T#o'VR4TVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#f'V#f#g4j#g#o'VR4qTcQsP}!O'V!Q!['V!c!}'V#R#S'V#T#o'VR5VVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#f'V#f#g5l#g#o'VR5qVcQ}!O'V!Q!['V!c!}'V#R#S'V#T#m'V#m#n6W#n#o'VR6_TcQxP}!O'V!Q!['V!c!}'V#R#S'V#T#o'V~6sOq~~6xOr~",
  tokenizers: [0, 1],
  topRules: {"QueryPipeline":[0,3]},
  tokenPrec: 0
});

const TypeQLLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            language.indentNodeProp.add({}),
            language.foldNodeProp.add({
                QueryStage: language.foldInside
            }),
            highlight.styleTags({
                // See: https://lezer.codemirror.net/docs/ref/#highlight.tags
                Var: highlight.tags.variableName,
                // Literals
                StringLiteral: highlight.tags.string,
                // Types
                Label: highlight.tags.typeName,
                // Keywords
                Isa: highlight.tags.keyword,
                Has: highlight.tags.keyword,
                Links: highlight.tags.keyword,
                // Stages
                Match: highlight.tags.heading1,
                // // SubPattern
                Or: highlight.tags.controlOperator,
                Not: highlight.tags.controlOperator,
                Try: highlight.tags.controlOperator,
                // Misc
                LineComment: highlight.tags.lineComment,
            })
        ]
    }),
    languageData: {
        commentTokens: { line: "#" }
    }
});
function TypeQL() {
    return new language.LanguageSupport(TypeQLLanguage);
}
// A Linter which flags syntax errors from: https://discuss.codemirror.net/t/showing-syntax-errors/3111/6
function otherExampleLinter() {
    return lint.linter((view) => {
        const diagnostics = [];
        language.syntaxTree(view.state).iterate({
            enter: n => {
                if (n.type.isError) {
                    diagnostics.push({
                        from: n.from,
                        to: n.to,
                        severity: "error",
                        message: "Syntax error.",
                    });
                }
            },
        });
        return diagnostics;
    });
}

exports.TypeQL = TypeQL;
exports.TypeQLLanguage = TypeQLLanguage;
exports.otherExampleLinter = otherExampleLinter;
